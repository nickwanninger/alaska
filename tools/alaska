#!/bin/bash

set -e

ALASKA="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/../"

source ${ALASKA}/enable
source ${ALASKA}/.config

# INPUT=$1
# shift

OUTFILE="a.out"
KEEP="false"
# where to compile a baseline, if we need to
BASELINE="false"
COLLECT_CLANG_ARGS=() INPUTS=()
OBJECT_TARGET=

phase="link"

while [[ $# -gt 0 ]]
do
    case $1 in
			-b|--baseline)
				BASELINE="true"
				shift
				;;
			-k|--keep-ir)
				KEEP="true"
				shift
				;;
			-o)
				OUTFILE="$2"
				shift
				shift
				COLLECT_CLANG_ARGS+=("-o $OUTFILE")
				;;
			-c)
				phase="compile"
				shift
				;;
			*)
				COLLECT_CLANG_ARGS+=("$1")
				shift
				;;
    esac
done


gparse ${COLLECT_CLANG_ARGS[@]}

if [ "$phase" = "compile" ]; then
	gclang -c ${COLLECT_CLANG_ARGS[@]}
	exit
else
	# If the program is being linked, link it as the user requests, then
	# use get-bc to run our pass on it behind the scenes :)
	gclang ${COLLECT_CLANG_ARGS[@]}
	get-bc $OUTFILE # "${OUTFILE}.bc" now exists
	[ "$BASELINE" == "true" ] && mv $OUTFILE $OUTFILE.baseline
	TMPFILE=${OUTFILE}.bc
	[ "$KEEP" == "true" ] && llvm-dis ${TMPFILE}.bc -o ${OUTFILE}.in.ll

	opt -load "${ALASKA}/build/AlaskaNormalize.so" \
		--alaska-norm                                \
		-enable-new-pm=0                             \
		"${TMPFILE}" -o "${TMPFILE}" 

	file $TMPFILE

	AA="--basic-aa --globals-aa --cfl-steens-aa --tbaa --cfl-anders-aa -scev-aa "

	LOOPS="-loops -loop-simplify -lcssa -domtree -scalar-evolution"
	AA=""
	LOOPS=""

	# opt $AA $LOOPS -licm "${TMPFILE}" -o "${TMPFILE}"

	opt -load "${ALASKA}/build/Alaska.so" \
		-domtree                           \
		-gvn                                \
		$AA                                 \
		--alaska                            \
		-enable-new-pm=0                    \
		"${TMPFILE}" -o "${TMPFILE}" 
	
	file $TMPFILE

	[ "$KEEP" == "true" ] && llvm-dis ${TMPFILE}.bc -o ${OUTFILE}.out.ll


	clang -lm -ldl -O3 -g -lpthread ${TMPFILE} -o $OUTFILE
fi


exit



TMPFILE="${OUTFILE}.tmp.bc"
llvm-link -o $TMPFILE ${INTERMEDIATE_BITCODES[@]}

# delete the temp files
rm ${INTERMEDIATE_BITCODES[@]}

LIB=lib/libalaska.so


LINKFLAGS=-Wno-unused-command-line-argument
# LINKFLAGS+=" -Xlinker --wrap=malloc"
# LINKFLAGS+=" -Xlinker --wrap=calloc"
# LINKFLAGS+=" -Xlinker --wrap=free"

if [ "${BASELINE}" != "" ]; then
	clang++ ${LINKFLAGS} -ldl -O3 -g -lpthread "${TMPFILE}" "${ALASKA}/build/$LIB" -o $BASELINE $COLLECT_CLANG_ARGS
fi


	

# -time-passes                        \


clang++ ${LINKFLAGS} -fno-exceptions -ldl -O3 -g3 -g -lpthread "${TMPFILE}"  -Wl,-rpath="${ALASKA}/build/lib" "${ALASKA}/build/$LIB" -o $OUTFILE $COLLECT_CLANG_ARGS

[ "$KEEP" == "true" ] && llvm-dis ${TMPFILE} -o ${OUTFILE}.out.ll

rm "${TMPFILE}" # "${INPUT}.ALASKA.bc"



