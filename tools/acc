#!/bin/bash

set -e

ALASKA="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )/../"

source ${ALASKA}/enable
source ${ALASKA}/.config

# INPUT=$1
# shift

OUTFILE=a.out
KEEP="false"
# where to compile a baseline, if we need to
BASELINE=""
COLLECT_CLANG_ARGS=() INPUTS=()
OBJECT_TARGET=

while [[ $# -gt 0 ]]
do
    case $1 in
			-B|--baseline)
				BASELINE="$2"
				shift
				shift
				;;
			-k|--keep-ir)
				KEEP="true"
				shift
				;;
			-o|--outfile)
				OUTFILE="$2"
				shift
				shift
				;;
			*)
				case $1 in
					*.c)
						INPUTS+=("$1")
						;;
					*.o)
						INPUTS+=("$1")
						;;
					*.cpp)
						INPUTS+=("$1")
						;;
					*.bc)
						INPUTS+=("$1")
						;;
					*)
						COLLECT_CLANG_ARGS+=("$1")
						;;
				esac
				shift
				;;
    esac
done

COLLECT_CLANG_ARGS=${COLLECT_CLANG_ARGS[@]}

INTERMEDIATE_BITCODES=()

for INPUT in ${INPUTS[@]}
do
	BITCODE=${INPUT}.tmp.bc
	INTERMEDIATE_BITCODES+=("$BITCODE")
	case $INPUT in
		*.c)
			clang -c $COLLECT_CLANG_ARGS -emit-llvm -D__ACC__  "${INPUT}" -o "${BITCODE}"
			;;
		*.cpp)
			clang++ -c $COLLECT_CLANG_ARGS -D__ACC__ -emit-llvm "${INPUT}" -o "${BITCODE}"
			;;
		*.bc)
			cp "${INPUT}" "${BITCODE}"
			;;
		*.o) # if any input is an object, just forward to clang to link everything like they ask.
			clang++ ${LINKFLAGS} ${INPUTS[@]} -ldl -O3 -g -lpthread "${TMPFILE}"  -Wl,-rpath="${ALASKA}/build/lib" "${ALASKA}/build/$LIB" -o $OUTFILE $COLLECT_CLANG_ARGS
			exit
			;;
		*)
			echo "I don't understand what to do with ${INPUT}"
			exit
			;;
	esac
done


TMPFILE="${OUTFILE}.tmp.bc"
llvm-link -o $TMPFILE ${INTERMEDIATE_BITCODES[@]}

# delete the temp files
rm ${INTERMEDIATE_BITCODES[@]}

LIB=lib/libalaska.so


LINKFLAGS=-Wno-unused-command-line-argument
# LINKFLAGS+=" -Xlinker --wrap=malloc"
# LINKFLAGS+=" -Xlinker --wrap=calloc"
# LINKFLAGS+=" -Xlinker --wrap=free"

if [ "${BASELINE}" != "" ]; then
	clang++ ${LINKFLAGS} -ldl -O3 -g -lpthread "${TMPFILE}" "${ALASKA}/build/$LIB" -o $BASELINE $COLLECT_CLANG_ARGS
fi


[ "$KEEP" == "true" ] && llvm-dis ${TMPFILE} -o ${OUTFILE}.in.ll

# opt -load "${ALASKA}/build/AlaskaNormalize.so" "-AlaskaNorm" "${TMPFILE}" -o "${TMPFILE}"
opt -load "${ALASKA}/build/AlaskaNormalize.so" \
	--alaska-norm                                \
	-enable-new-pm=0                             \
	"${TMPFILE}" -o "${TMPFILE}" 
AA="--basic-aa --globals-aa --cfl-steens-aa --tbaa --cfl-anders-aa -scev-aa "

LOOPS="-loops -loop-simplify -lcssa -domtree -scalar-evolution"


opt $AA $LOOPS -licm "${TMPFILE}" -o "${TMPFILE}"

opt -load "${ALASKA}/build/Alaska.so" \
	$LOOPS                              \
	-gvn                                \
	$AA                                 \
	--alaska                            \
	-enable-new-pm=0                    \
	"${TMPFILE}" -o "${TMPFILE}" 
	

# -time-passes                        \


clang++ ${LINKFLAGS} -fno-exceptions -ldl -O3 -g3 -g -lpthread "${TMPFILE}"  -Wl,-rpath="${ALASKA}/build/lib" "${ALASKA}/build/$LIB" -o $OUTFILE $COLLECT_CLANG_ARGS

[ "$KEEP" == "true" ] && llvm-dis ${TMPFILE} -o ${OUTFILE}.out.ll

rm "${TMPFILE}" # "${INPUT}.ALASKA.bc"



